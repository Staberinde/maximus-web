INSTALLING MAXIMUS-WEB ON UBUNTU 10.04

This guide is intended to help you install maximus-web on Ubuntu 10.04. Although
targeted at 10.04 the steps are probably not much different for older versions.

First, make sure all required software is installed

	$ sudo apt-get install build-essential libmodule-install-perl mysql-server\
		git-core

This step is not required perse, but it helps you to install the required Perl
modules in a local directory. Doing so makes sure modules aren't installed in
the same directory as where your distribution installs its modules. Whenever
you decide to upgrade your system or install updates you risk your modules being
overwritten. So that's why we go for a local installation.

	$ sudo apt-get install liblocal-lib-perl

Next, we need to make sure local::lib is being used. By calling perl from the
command line and simply load local::lib we get a nice set of helpful export
commands.

	$ perl -Mlocal::lib
	
This results in something like this:

  export MODULEBUILDRC=/home/username/perl/.modulebuildrc
  export PERL_MM_OPT='INSTALL_BASE=/home/username/perl'
  export PERL5LIB='/home/username/perl/lib/perl5:/home/username/perl/lib/perl5/i386-linux'
  export PATH="/home/username/perl/bin:$PATH"
 
Copy these export lines and execute them on your command line. You can also 
store these exports in your ~/.bashrc so anytime you login these paths are set
by default. This makes sure installing modules from CPAN is safe.

Now we can safely build and install maximus-web. While installing it might nag
about missing modules and asks if you want to install them. Of course, answer
yes in that case. There are quite some dependencies to install so get yourself
some coffee. After all dependencies have been installed any forthcoming updates
will take less time. You can probably install most modules from your package
manager (apt, yum), but the versions of these modules are usually far behind.

	$ git clone git://github.com/Htbaa/maximus-web.git
	$ cd maximus-web/Maximus
	$ perl Makefile.PL
	$ make
	$ make installdeps

CONFIGURING MYSQL

Create user called maximus. By default we expect the password to be 'demo'.

	$ mysql -umaximus -p --database maximus < sql/Maximus-Schema-0.001-MySQL.sql
	
In case of an upgrade run the following command. For now, if the password is
something other than 'demo' please alter the maximus_sql-upgrade.sql script
before running it.

	$ perl script/maximus_sql-upgrade.pl

CONFIGURING MAXIMUS

	$ cp maxmimus.default.conf maximus.conf

Edit maximus.conf to your needs. The file uses Apache like configuration style.
If something isn't clear, please let me know.

RUNNING THE FASTCGI DAEMON

	$ perl script/maximus_fastcgi.pl -l /tmp/maximus.socket -n 5 -p /tmp/maximus.pid -d

CONFIGURING APACHE2 FOR FASTCGI

First enable SSL support

	$ sudo a2enmod ssl
	
Here's a minimal virtual host configuration for Apache. This assumes running
maximus-web as a stand-alone FastCGI daemon. For other deployment options please
read Catalyst::Manual::Cookbook.

	<VirtualHost *:80>
			DocumentRoot /home/maximus/maximus-web/Maximus/root
			FastCgiExternalServer /tmp/maximus.fcgi -socket /tmp/maximus.socket
			Alias / /tmp/maximus.fcgi/
	        
			# This is for modules that need the Authorization header like 
			# Catalyst::Plugin::Authentication::Credential::HTTP
			# mod_cgi and mod_fastcgi don't do this by default
			RewriteCond %{HTTP:Authorization} ^(.+)
			RewriteRule ^(.*)$ $1 [E=HTTP_AUTHORIZATION:%1,PT]
			
			RewriteRule ^$ / [R]	        
	</VirtualHost>
	
	# Next, copy the virtual host configuration from above, but change the port
	# to 443 and add these lines.
	# This uses the self-signed certificate but will suffice.	
	<VirtualHost *:443>
		...
		SSLEngine on
		SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem
		SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
		...
	</VirtualHost>

RUNNING A PSGI SUPPORTED SERVER

Starman gives the best performance, but is *nix only

	$ starman script/maximus.psgi

Plack has plackup which works on Windows as well

	$ plackup script/maximus.psgi

Or use the build in dev server

	$ perl script/maximus_server -k -p 5000
	
CONFIGURING APACHE2 FOR REVERSE PROXY

Largely the same as running through FastCGI, but it needs some additional
modules to be enabled.

	$ sudo a2enmod proxy
	$ sudo a2enmod proxy_http
	$ sudo a2enmod ssl
	
And this is a sample configuration for running through a reverse proxy.
	
	<VirtualHost *:80>
			ServerName maximus.htbaa.com
			DocumentRoot /home/maximus/maximus-web/Maximus/root
			Alias /static /home/maximus/maximus-web/Maximus/root/static

			ProxyRequests Off
			<Proxy *>
					Order deny,allow
					Allow from all
			</Proxy>

			ProxyPass /static !
			ProxyPass /favicon.ico !

			ProxyPass / http://localhost:5000/
			ProxyPassReverse / http://localhost:5000/
	</VirtualHost>

	<VirtualHost *:443>
		...
		SSLEngine on
		SSLProxyEngine on
		SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem
		SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key
		...
	</VirtualHost>
	
SELF SIGNED CERTIFICATE

Create a private key

	$ openssl genrsa -des3 -out server.key 1024
	
Remember that the common name should be the domain name!

	$ openssl req -new -key server.key -out server.csr
	
Remove passphrase from key so Apache won't complain

	$ cp server.key server.key.org
	$ openssl rsa -in server.key.org -out server.key
	
Now self sign the certificate

	$ openssl x509 -req -days 365 -in server.csr -signkey server.key \
	  -out server.crt
	  
To use the certificate for to virtual host in Apache set SSLCertificateFile to
server.crt and SSLCertificateKeyFile to server.key.
